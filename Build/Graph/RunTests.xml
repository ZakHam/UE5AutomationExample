<?xml version='1.0' ?>
<BuildGraph xmlns="http://www.epicgames.com/BuildGraph"
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xsi:schemaLocation="http://www.epicgames.com/BuildGraph ../../../Engine/Build/Graph/Schema.xsd" >

	<!-- Specify an input option for the graph. These are set in the command line via "-set:{OptionName}={OptionValue}
	     Restrict can be a regular expression, or a set of values: "^[^ ]+Project" or "Enable|Disable|Skip" -->
	<Option Name="TargetProject" Restrict="[^ ]*" DefaultValue="AutomationExample" Description="The target project."/>
	<Option Name="BuildType" Restrict="Development|Debug" DefaultValue="Development" Description="The type of editor to compile" />
	<Option Name="TestName" DefaultValue="AutomationExample.Tests." Description="The tests to run" />

	<!-- The agent tag is detected by Horde when that is your CI system, and each node will run on the specified agent
	     pool. In this case "Win64", this is useful if you have some nodes that need different environments, e.g. a
	     different VS version, a docker daemon etc. -->
	<Agent Name="Default Agent" Type="Win64">

		<!-- Each node in a build graph should specify a block of work, for example the following node compiles the
		     editor based on the input options. The compile action will tag each output file with #EditorBinaries,
		     and this is specified as the output of the node. Subsequent nodes can depend on these files, or use them
		     as input to actions. -->
		<Node Name="Compile UnrealEditor Win64" Produces="#EditorBinaries">
			<Compile Target="$(TargetProject)Editor" Platform="Win64" Configuration="$(BuildType)" Project="$(TargetProject)" Tag="#EditorBinaries"/>
		</Node>
		
		<Node Name="Run Custom Task">
			<CustomTask Target="$(TargetProject)" Arguments="Arg1;Arg2" />
		</Node>

		<!-- This node runs the specified tests against the built editor, it therefore depends on the product of the
		     previous compile editor node. -->
		<Node Name="Run Editor Tests" Requires="#EditorBinaries;Run Custom Task">
			<Command Name="RunUnreal" Arguments="-Test=UE.EditorAutomation -Build=Editor -Project=$(TargetProject) -RunTest=$(TestName) -NullRHI" />
		</Node>
	</Agent>
</BuildGraph>